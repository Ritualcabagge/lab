/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics. PIPEEEEEEEEEEEEXDDDDDDXDXDXDDDXD
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int datLCD[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
int a = 0;
int C=0;
int s=0;

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void configInicio(int bits, int linea, int formato, int on, int cursor, int parpadeo, int LR, int S);
void borrarPantalla();
void volverinicio();
void ejecutar();
void escribirLCD();
void espacio(int LR, int SC);
void confdireccion(int AC6, int AC5, int AC4, int AC3, int AC2, int AC1, int AC0);
void escribirRAM(int D7, int D6, int D5, int D4, int D3, int D2, int D1, int D0);
void letras(char letra[]);
void numero(int numero);
void caracteres (char caracter[]);
void descomponerNumero3(int valor) ;
void descomponerNumero(int valor) ;
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int botonPresionado = 0;
/* USER CODE END 0 */

/**
* @brief  The application entry point.
* @retval int
*/
int main(void)
{
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

/* MCU Configuration--------------------------------------------------------*/

/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();

/* USER CODE BEGIN Init */

/* USER CODE END Init */

/* Configure the system clock */
SystemClock_Config();

/* USER CODE BEGIN SysInit */

/* USER CODE END SysInit */

/* Initialize all configured peripherals */
MX_GPIO_Init();
MX_DMA_Init();
MX_ADC1_Init();
/* USER CODE BEGIN 2 */
uint32_t entrada[4]={0,0,0,0};
HAL_ADC_Start_DMA(&hadc1,entrada,4);
configInicio(1,1,0,1,1,1,1,0);
/* USER CODE END 2 */

/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1) {
	C = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);

	if (C == GPIO_PIN_SET && botonPresionado == 0) {
	    HAL_Delay(50);
	    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) {
	        s = (s + 1) % 6;
	        botonPresionado = 1;
	    }
	}
	if (C == GPIO_PIN_RESET && botonPresionado == 1) {
	    HAL_Delay(50);
	    botonPresionado = 0;
	}

	/*C = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);

	    if (C == GPIO_PIN_SET && botonPresionado == 0) {
	        HAL_Delay(50);
	        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) {
	            s++;
	            botonPresionado = 1;
	            if (s > 5) {
	                s = 0;
	            }
	        }
	        HAL_Delay(200);
	    }

	    if (C == GPIO_PIN_RESET && botonPresionado == 1) {
	        HAL_Delay(50);
	        botonPresionado = 0;
	    }
*/
switch (s) {
case 1:

// Potenciometro
confdireccion(0, 0, 0, 0, 0, 0, 0);
letras("V");
escribirLCD();
ejecutar();
letras("o");
escribirLCD();
ejecutar();
letras("l");
escribirLCD();
ejecutar();
letras("t");
escribirLCD();
ejecutar();

espacio(1, 0);

letras("B");
escribirLCD();
ejecutar();
letras("i");
escribirLCD();
ejecutar();
letras("t");
escribirLCD();
ejecutar();
letras("s");
escribirLCD();
ejecutar();

espacio(1, 0);

letras("G");
escribirLCD();
ejecutar();
letras("r");
escribirLCD();
ejecutar();
letras("a");
escribirLCD();
ejecutar();
letras("d");
escribirLCD();
ejecutar();

confdireccion(1, 0, 0, 0, 0, 0, 0);

int v1= entrada[0];

float volts = (v1 * 3.3) / 4096;
int volt= (int)(volts * 100);

int vol3 = volt / 100;
int vol22 = volt - (vol3 * 100);
int vol2 = vol22 / 10;
int vol1 = volt - (vol3 * 100) - (vol2 * 10)  ;

numero(vol3);
escribirLCD();
ejecutar();

caracteres(".");
escribirLCD();
ejecutar();

numero(vol2);
escribirLCD();
ejecutar();

numero(vol1);
escribirLCD();
ejecutar();
espacio(1, 0);

descomponerNumero(entrada[0]);

espacio(1, 0);
// Convertir voltaje a grados
int grados = (int)((volts * 360) / 3.3);

descomponerNumero3(grados);

HAL_Delay(1000);

break;
case 2:
//Fotoresistencia
confdireccion(0, 0, 0, 0, 0, 0, 0);
letras("C");
escribirLCD();
ejecutar();
letras("a");
escribirLCD();
ejecutar();
letras("n");
escribirLCD();
ejecutar();
letras("t");
escribirLCD();
ejecutar();
caracteres(".");
escribirLCD();
ejecutar();
espacio(1, 0);
letras("L");
escribirLCD();
ejecutar();
letras("u");
escribirLCD();
ejecutar();
letras("z");
escribirLCD();
ejecutar();
confdireccion(1, 0, 0, 0, 0, 0, 0);
int v2 =  entrada[1];

descomponerNumero(v2);

HAL_Delay(500);
if(v2<=10){
borrarPantalla();
confdireccion(0, 0, 0, 1, 0,1,1);
letras("N");
escribirLCD();
ejecutar();
letras("o");
escribirLCD();
ejecutar();

confdireccion(1, 0, 0, 1, 0,0,0);
letras("H");
escribirLCD();
ejecutar();
letras("a");
escribirLCD();
ejecutar();
letras("y");
escribirLCD();
ejecutar();

espacio(1, 0);
letras("L");
escribirLCD();
ejecutar();
letras("u");
escribirLCD();
ejecutar();
letras("z");
escribirLCD();
ejecutar();
}
else if(v2>11&&v2<=600){
borrarPantalla();
confdireccion(0, 0, 0, 1, 0,1,0);

letras("P");
escribirLCD();
ejecutar();
letras("o");
escribirLCD();
ejecutar();
letras("c");
escribirLCD();
ejecutar();
letras("a");
escribirLCD();
ejecutar();

confdireccion(1, 0, 0, 1, 1,0,0);

letras("L");
escribirLCD();
ejecutar();
letras("u");
escribirLCD();
ejecutar();
letras("z");
escribirLCD();
ejecutar();
}
else if(v2>600&&v2<=1100){
borrarPantalla();
confdireccion(1, 0, 0, 0, 1,1,0);

letras("I");
escribirLCD();
ejecutar();
letras("n");
escribirLCD();
ejecutar();
letras("t");
escribirLCD();
ejecutar();
letras("e");
escribirLCD();
ejecutar();
letras("r");
escribirLCD();
ejecutar();
letras("m");
escribirLCD();
ejecutar();
letras("e");
escribirLCD();
ejecutar();
letras("d");
escribirLCD();
ejecutar();
letras("i");
escribirLCD();
ejecutar();
letras("o");
escribirLCD();
ejecutar();

}else if(v2>1100&&v2<=2500){
borrarPantalla();
confdireccion(0, 0, 0, 1, 0,1,0);

letras("H");
escribirLCD();
ejecutar();
letras("a");
escribirLCD();
ejecutar();
letras("y");
escribirLCD();
ejecutar();
confdireccion(1, 0, 0, 0, 1,1,1);
letras("L");
escribirLCD();
ejecutar();
letras("u");
escribirLCD();
ejecutar();
letras("z");
escribirLCD();
ejecutar();
espacio(1, 0);
letras("E");
escribirLCD();
ejecutar();
letras("x");
escribirLCD();
ejecutar();
letras("t");
escribirLCD();
ejecutar();
caracteres(".");
escribirLCD();
ejecutar();

}else if(v2>2500&&v2<=4095){
borrarPantalla();
confdireccion(0, 0, 0, 1, 0,1,0);

letras("M");
escribirLCD();
ejecutar();
letras("u");
escribirLCD();
ejecutar();
letras("c");
escribirLCD();
ejecutar();
letras("h");
escribirLCD();
ejecutar();
letras("a");
escribirLCD();
ejecutar();
confdireccion(1, 0, 0, 1, 0,1,0);
letras("L");
escribirLCD();
ejecutar();
espacio(1, 0);
letras("u");
escribirLCD();
ejecutar();
letras("z");
}

HAL_Delay(50);

break;



case 3:
//Sensor cny70

confdireccion(0, 0, 0, 0, 0, 0, 0);
letras("D");
escribirLCD();
ejecutar();
letras("i");
escribirLCD();
ejecutar();
letras("s");
escribirLCD();
ejecutar();
letras("t");
escribirLCD();
ejecutar();
letras("a");
escribirLCD();
ejecutar();
letras("n");
escribirLCD();
ejecutar();
letras("c");
escribirLCD();
ejecutar();
letras("i");
escribirLCD();
ejecutar();
letras("a");
escribirLCD();
ejecutar();
confdireccion(1, 0, 0, 0, 0, 0, 0);
int v3 =  entrada[2];

int amin = 630;    // ADC a 15 cm
int amax = 4095;   // ADC a 0.1 cm (1 mm)
float dmin= 15.0;  // 15 cm
float dmax = 0.1;   // 0.1 cm (1 mm)

float dist = (v3 - amax) * (dmin - dmax) / (amin - amax) + dmax;

int dis = (int)(dist * 10);

descomponerNumero3(dis);

if(v3<=630){
borrarPantalla();
confdireccion(0, 0, 0, 1, 0,1,0);
letras("M");
escribirLCD();
ejecutar();
letras("u");
escribirLCD();
ejecutar();
letras("y");
escribirLCD();
ejecutar();

confdireccion(1, 0, 0, 1, 0,0,1);
letras("L");
escribirLCD();
ejecutar();
letras("e");
escribirLCD();
ejecutar();
letras("j");
escribirLCD();
ejecutar();
letras("o");
escribirLCD();
ejecutar();
letras("s");
escribirLCD();
ejecutar();
}
else if(v3>630&&v3<=860){
borrarPantalla();
confdireccion(1, 0, 0, 1, 0,0,1);

letras("L");
escribirLCD();
ejecutar();
letras("e");
escribirLCD();
ejecutar();
letras("j");
escribirLCD();
ejecutar();
letras("o");
escribirLCD();
ejecutar();
letras("s");
escribirLCD();
ejecutar();
}
else if(v3>860&&v3<=2600){
borrarPantalla();
confdireccion(1, 0, 0, 1, 0,0,1);

letras("C");
escribirLCD();
ejecutar();
letras("e");
escribirLCD();
ejecutar();
letras("r");
escribirLCD();
ejecutar();
letras("c");
escribirLCD();
ejecutar();
letras("a");
escribirLCD();
ejecutar();
}
else if(v2>2600&&v2<=4095){
borrarPantalla();
confdireccion(0, 0, 0, 1, 0,1,0);
letras("M");
escribirLCD();
ejecutar();
letras("u");
escribirLCD();
ejecutar();
letras("y");
escribirLCD();
ejecutar();

confdireccion(1, 0, 0, 1, 0,0,1);
letras("C");
escribirLCD();
ejecutar();
letras("e");
escribirLCD();
ejecutar();
letras("r");
escribirLCD();
ejecutar();
letras("c");
escribirLCD();
ejecutar();
letras("a");
escribirLCD();
ejecutar();
}

HAL_Delay(100);

break;
case 4:
//Sensor cny70

confdireccion(0, 0, 0, 0, 0, 0, 0);
letras("C");
escribirLCD();
ejecutar();
letras("o");
escribirLCD();
ejecutar();
letras("l");
escribirLCD();
ejecutar();
letras("o");
escribirLCD();
ejecutar();
letras("r");
escribirLCD();
ejecutar();
caracteres("(");
escribirLCD();
ejecutar();
numero(3);
escribirLCD();
ejecutar();
letras("c");
escribirLCD();
ejecutar();
letras("m");
escribirLCD();
ejecutar();
caracteres(")");
escribirLCD();
ejecutar();

if(v3>=1000&&v3<=1050){
borrarPantalla();
confdireccion(1, 0, 0, 0, 1,0,0);
letras("B");
escribirLCD();
ejecutar();
letras("L");
escribirLCD();
ejecutar();
letras("A");
escribirLCD();
ejecutar();
letras("N");
escribirLCD();
ejecutar();
letras("C");
escribirLCD();
ejecutar();
letras("O");
escribirLCD();
ejecutar();
}
else if(v3>=800&&v3<=829){
borrarPantalla();
confdireccion(1, 0, 0, 0, 1,0,1);

letras("A");
escribirLCD();
ejecutar();
letras("Z");
escribirLCD();
ejecutar();
letras("U");
escribirLCD();
ejecutar();
letras("L");
escribirLCD();
ejecutar();

}
else if(v3>=830&&v3<=866){
borrarPantalla();
confdireccion(1, 0, 0, 0, 1,0,0);
letras("V");
escribirLCD();
ejecutar();
letras("E");
escribirLCD();
ejecutar();
letras("R");
escribirLCD();
ejecutar();
letras("D");
escribirLCD();
ejecutar();
letras("E");
escribirLCD();
ejecutar();
}
else if(v3>=900&&v3<=930){
borrarPantalla();
confdireccion(1, 0, 0, 0, 1,0,1);

letras("R");
escribirLCD();
ejecutar();
letras("O");
escribirLCD();
ejecutar();
letras("J");
escribirLCD();
ejecutar();
letras("O");
escribirLCD();
ejecutar();;
}
else if(v3>=956&&v3<=965){
borrarPantalla();
confdireccion(1, 0, 0, 0, 0,1,1);
letras("A");
escribirLCD();
ejecutar();
letras("M");
escribirLCD();
ejecutar();
letras("A");
escribirLCD();
ejecutar();
letras("R");
escribirLCD();
ejecutar();
letras("I");
escribirLCD();
ejecutar();
letras("L");
escribirLCD();
ejecutar();
letras("L");
escribirLCD();
ejecutar();
letras("O");
escribirLCD();
ejecutar();
}

HAL_Delay(100);

break;

case 5:
//Sensor de temperatura LM35
confdireccion(0, 0, 0, 0, 0, 0, 0);


letras("T");
escribirLCD();
ejecutar();
letras("e");
escribirLCD();
ejecutar();
letras("m");
escribirLCD();
ejecutar();
letras("p");
escribirLCD();
ejecutar();
letras("e");
escribirLCD();
ejecutar();
letras("r");
escribirLCD();
ejecutar();
letras("a");
escribirLCD();
ejecutar();
letras("t");
escribirLCD();
ejecutar();
letras("u");
escribirLCD();
ejecutar();
letras("r");
escribirLCD();
ejecutar();
letras("a");
escribirLCD();
ejecutar();

confdireccion(1, 0, 0, 0, 0, 0, 0);

int v4 = entrada[3];

// Convertir bits a voltaje
float voltaje = (v4 * 3.3) / 4096;

// Convertir voltaje a temperatura en °C ( 10mV por grado)
float tem = voltaje / 0.01;  // temp en grados °C
int temp= (int)(tem * 100);

int bit4 = temp / 1000;
int bit33 = temp - (bit4 * 1000);
int bit3 = bit33 / 100;
int bit22 = temp- (bit4 * 1000) - (bit3 * 100);
int bit2 = bit22 / 10;
int bit1 = temp- (bit4* 1000) - (bit3 * 100) - (bit2 * 10);

numero(bit4);
escribirLCD();
ejecutar();
numero(bit3);
escribirLCD();
ejecutar();
caracteres(".");
escribirLCD();
ejecutar();
numero(bit2);
escribirLCD();
ejecutar();
numero(bit1);
escribirLCD();
ejecutar();

escribirRAM( 1, 1, 0, 0, 0, 1, 1, 0);

	  		  escribirLCD();
	  		  ejecutar();


HAL_Delay(300);
break;
}
HAL_Delay(100);
/* USER CODE END WHILE */

/* USER CODE BEGIN 3 */
}
/* USER CODE END 3 */
}
void ejecutar()
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);  // E = 0
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);    // E = 1
	HAL_Delay(2);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);  // E = 0
	HAL_Delay(3);
}
void escribirLCD()
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, datLCD[0]);  // RS Pin
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, datLCD[1]);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, datLCD[2]);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, datLCD[3]);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, datLCD[4]);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, datLCD[5]);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, datLCD[6]);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, datLCD[7]);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, datLCD[8]);
}
void configInicio(int bits, int linea, int formato, int on, int cursor, int parpadeo, int LR, int S)
{
	/* CONFIGURACIÓN DE TODOS LOS BITS CUANDO ESTEN ABAJO */
	escribirLCD();
	ejecutar();
	/* FUNCION SET */
	datLCD[0] = 0; datLCD[1] = 0; datLCD[2] = 0; datLCD[3] = 1; datLCD[4] = bits;datLCD[5] = linea;datLCD[6] = formato;
	escribirLCD();
	ejecutar();
	/* Display on/off control */
	datLCD[0] = 0;datLCD[1] = 0;datLCD[2] = 0;datLCD[3] = 0;datLCD[4] = 0;datLCD[5] = 1; datLCD[6] = on;datLCD[7] = cursor;datLCD[8] = parpadeo;
	escribirLCD();
	ejecutar();
	/* Entry mode set */
	datLCD[0] = 0;datLCD[1] = 0;datLCD[2] = 0;datLCD[3] = 0;datLCD[4] = 0;datLCD[5] = 0;datLCD[6] = 1; datLCD[7] = LR;datLCD[8] = S;
	escribirLCD();
	ejecutar();
}
void borrarPantalla()
{
	datLCD[0] = 0; datLCD[1] = 0;datLCD[2] = 0;datLCD[3] = 0;datLCD[4] = 0;datLCD[5] = 0;datLCD[6] = 0;datLCD[7] = 0;datLCD[8] = 1;
	escribirLCD();
	ejecutar();

}
void volverinicio()
{
	datLCD[0] = 0;datLCD[1] = 0;datLCD[2] = 0;datLCD[3] = 0;datLCD[4] = 0;datLCD[5] = 0;datLCD[6] = 0;datLCD[7] = 1;datLCD[8] = 0;
	escribirLCD();
	ejecutar();
}
void espacio(int LR, int SC)
{
	datLCD[0] = 0; datLCD[1] = 0;datLCD[2] = 0;datLCD[3] = 0;datLCD[4] = 1; datLCD[5] = SC; datLCD[6] = LR;datLCD[7] = 0;datLCD[8] = 0;
	escribirLCD();
	ejecutar();
}
void confdireccion(int AC6, int AC5, int AC4, int AC3, int AC2, int AC1, int AC0)
{
	datLCD[0] = 0;datLCD[1] = 1;datLCD[2] = AC6;datLCD[3] = AC5;datLCD[4] = AC4;datLCD[5] = AC3;datLCD[6] = AC2;datLCD[7] = AC1;datLCD[8] = AC0;
	escribirLCD();
	ejecutar();
}
void escribirRAM(int D7, int D6, int D5, int D4, int D3, int D2, int D1, int D0){
	datLCD[0] = 1; datLCD[1] = D7;datLCD[2] = D6;datLCD[3] = D5;datLCD[4] = D4;datLCD[5] = D3;datLCD[6] = D2;datLCD[7] = D1;datLCD[8] = D0;
	escribirLCD();
	ejecutar();
};
	void letras(char letra[])
	{
		switch (letra[0])
		{
		case 'a':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=0; datLCD[6]=0; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'A':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=0; datLCD[6]=0; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'b':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=0; datLCD[6]=0; datLCD[7]=1; datLCD[8]=0;
		break;
		case 'B':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=0; datLCD[6]=0; datLCD[7]=1; datLCD[8]=0;
		break;
		case 'c':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=0; datLCD[6]=0; datLCD[7]=1; datLCD[8]=1;
		break;
		case 'C':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=0; datLCD[6]=0; datLCD[7]=1; datLCD[8]=1;
		break;
		case 'd':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=0; datLCD[6]=1; datLCD[7]=0; datLCD[8]=0;
		break;
		case 'D':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=0; datLCD[6]=1; datLCD[7]=0; datLCD[8]=0;
		break;
		case 'e':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=0; datLCD[6]=1; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'E':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=0; datLCD[6]=1; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'f':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=0; datLCD[6]=1; datLCD[7]=1; datLCD[8]=0;
		break;
		case 'F':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=0; datLCD[6]=1; datLCD[7]=1; datLCD[8]=0;
		break;
		case 'g':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=0; datLCD[6]=1; datLCD[7]=1; datLCD[8]=1;
		break;
		case 'G':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=0; datLCD[6]=1; datLCD[7]=1; datLCD[8]=1;
		break;
		case 'h':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=1; datLCD[6]=0; datLCD[7]=0; datLCD[8]=0;
		break;
		case 'H':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=1; datLCD[6]=0; datLCD[7]=0; datLCD[8]=0;
		break;
		case 'i':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=1; datLCD[6]=0; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'I':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=1; datLCD[6]=0; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'j':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=1; datLCD[6]=0; datLCD[7]=1; datLCD[8]=0;
		break;
		case 'J':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=1; datLCD[6]=0; datLCD[7]=1; datLCD[8]=0;
		break;
		case 'k':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=1; datLCD[6]=0; datLCD[7]=1; datLCD[8]=1;
		break;
		case 'K':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=1; datLCD[6]=0; datLCD[7]=1; datLCD[8]=1;
		break;
		case 'l':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=1; datLCD[6]=1; datLCD[7]=0; datLCD[8]=0;
		break;
		case 'L':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=1; datLCD[6]=1; datLCD[7]=0; datLCD[8]=0;
		break;
		case 'm':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=1; datLCD[6]=1; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'M':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=1; datLCD[6]=1; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'n':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=1; datLCD[6]=1; datLCD[7]=1; datLCD[8]=0;
		break;
		case 'N':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=1; datLCD[6]=1; datLCD[7]=1; datLCD[8]=0;
		break;
		case 'o':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=0; datLCD[5]=1; datLCD[6]=1; datLCD[7]=1; datLCD[8]=1;
		break;
		case 'O':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=1; datLCD[6]=1; datLCD[7]=1; datLCD[8]=1;
		break;
		case 'p':datLCD[0]=1; datLCD[1]=1; datLCD[2]=1; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=0; datLCD[7]=0; datLCD[8]=0;
		break;
		case 'P':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=1; datLCD[5]=0; datLCD[6]=0; datLCD[7]=0; datLCD[8]=0;
		break;
		case 'q':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=0; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'Q':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=1; datLCD[5]=0; datLCD[6]=0; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'r':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=0; datLCD[7]=1; datLCD[8]=0;
		break;
		case 'R':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=1; datLCD[5]=0; datLCD[6]=0; datLCD[7]=1; datLCD[8]=0;
		break;
		case 's':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=0; datLCD[7]=1; datLCD[8]=1;
		break;
		case 'S':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=1; datLCD[5]=0; datLCD[6]=0; datLCD[7]=1; datLCD[8]=1;
		break;
		case 't':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=1; datLCD[7]=0; datLCD[8]=0;
		break;
		case 'T':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=1; datLCD[5]=0; datLCD[6]=1; datLCD[7]=0; datLCD[8]=0;
		break;
		case 'u':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=1; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'U':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=1; datLCD[5]=0; datLCD[6]=1; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'v':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=1; datLCD[7]=1; datLCD[8]=0;
		break;
		case 'V':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=0; datLCD[4]=1; datLCD[5]=0; datLCD[6]=1; datLCD[7]=1; datLCD[8]=0;
		break;
		case 'w':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=1; datLCD[7]=1; datLCD[8]=1;
		break;
		case 'x':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=1; datLCD[5]=1; datLCD[6]=0; datLCD[7]=0; datLCD[8]=0;
		break;
		case 'y':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=1; datLCD[5]=1; datLCD[6]=0; datLCD[7]=0; datLCD[8]=1;
		break;
		case 'z':datLCD[0]=1; datLCD[1]=0; datLCD[2]=1; datLCD[3]=1; datLCD[4]=1; datLCD[5]=1; datLCD[6]=0; datLCD[7]=1; datLCD[8]=0;
		break;
		}
	}
	void numero(int numero)
	{
		switch (numero){
		case 0:datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=0; datLCD[7]=0; datLCD[8]=0;
		break;
		case 1:datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=0; datLCD[7]=0; datLCD[8]=1;
		break;
		case 2:datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=0; datLCD[7]=1; datLCD[8]=0;
		break;
		case 3:datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=0; datLCD[7]=1; datLCD[8]=1;
		break;
		case 4:datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=1; datLCD[7]=0; datLCD[8]=0;
		break;
		case 5: datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=1; datLCD[7]=0; datLCD[8]=1;
		break;
		case 6: datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=1; datLCD[7]=1; datLCD[8]=0;
		break;
		case 7:datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1; datLCD[5]=0; datLCD[6]=1; datLCD[7]=1; datLCD[8]=1;
		break;
		case 8:datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1; datLCD[5]=1; datLCD[6]=0; datLCD[7]=0; datLCD[8]=0;
		break;
		case 9:datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1; datLCD[5]=1; datLCD[6]=0; datLCD[7]=0; datLCD[8]=1;
		break;
		}

	}
	void caracteres (char caracter[])
	{
		switch (caracter[0]){

		case '°':datLCD[0]=1; datLCD[1]=1; datLCD[2]=1; datLCD[3]=0; datLCD[4]=0; datLCD[5]=0; datLCD[6]=1; datLCD[7]=1; datLCD[8]=0;
			break;
		case ':':datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1; datLCD[5]=1; datLCD[6]=0; datLCD[7]=1; datLCD[8]=0;
		break;
		case '.':datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=0; datLCD[5]=1; datLCD[6]=1; datLCD[7]=1; datLCD[8]=0;
		break;
		case '(':datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=0; datLCD[5]=1; datLCD[6]=0; datLCD[7]=0; datLCD[8]=0;
		break;
		case ')':datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=0; datLCD[5]=1; datLCD[6]=0; datLCD[7]=0; datLCD[8]=1;
		break;
		}
	}
	void descomponerNumero(int valor) {

	int digit4 = valor / 1000;
	int digit33 = valor - (digit4 * 1000);
	int digit3 = digit33 / 100;
	int digit22 = valor - (digit4 * 1000) - (digit3 * 100);
	int digit2 = digit22 / 10;
	int digit1 = valor - (digit4 * 1000) - (digit3 * 100) - (digit2 * 10);

	numero(digit4);  // (miles)
	escribirLCD();
	    ejecutar();
	numero(digit3);  // centenas)
	escribirLCD();
	    ejecutar();
	numero(digit2);  // (decenas)
	escribirLCD();
	    ejecutar();
	numero(digit1);  //(unidades)
	escribirLCD();
	    ejecutar();
	}
	void descomponerNumero3(int valor) {
	    int digit3 = valor / 100;  // Centenas
	    int digit22 = valor - (digit3 * 100);
	    int digit2 = digit22 / 10;  // Decenas
	    int digit1 = valor - (digit3 * 100) - (digit2 * 10);  // Unidades

	    numero(digit3);
	    escribirLCD();
	    ejecutar();
	    numero(digit2);
	    escribirLCD();
	    ejecutar();
	    numero(digit1);
	    escribirLCD();
	    ejecutar();
	}


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */



	  //Sensor de temperatura LM35

	  confdireccion(0, 0, 0, 0, 0, 0, 0);





	  letras("T");

	  escribirLCD();

	  ejecutar();

	  letras("e");

	  escribirLCD();

	  ejecutar();

	  letras("m");

	  escribirLCD();

	  ejecutar();

	  letras("p");

	  escribirLCD();

	  ejecutar();

	  letras("e");

	  escribirLCD();

	  ejecutar();

	  letras("r");

	  escribirLCD();

	  ejecutar();

	  letras("a");

	  escribirLCD();

	  ejecutar();

	  letras("t");

	  escribirLCD();

	  ejecutar();

	  letras("u");

	  escribirLCD();

	  ejecutar();

	  letras("r");

	  escribirLCD();

	  ejecutar();

	  letras("a");

	  escribirLCD();

	  ejecutar();





	  confdireccion(1, 0, 0, 0, 0, 0, 0);





	  int v4 = entrada[3];



	  // Convertir bits a voltaje

	  float voltaje = (v4 * 3.3) / 4096;

	  int vol= (int)(voltaje * 100);

	  // Convertir voltaje a temperatura en °C (asumiendo 10mV por grado)

	  float temp = voltaje / 0.01;  // temp en grados °C



	  int bit4 = temp / 1000;

	  int bit33 = temp - (bit4 * 1000);

	  int bit3 = bit33 / 100;

	  int bit22 = temp- (bit4 * 1000) - (bit3 * 100);

	  int bit2 = bit22 / 10;

	  int bit1 = temp- (bit4* 1000) - (bit3 * 100) - (bit2 * 10);





	  num(bit4);  // Mostrar el primer dígito (miles)

	  escribirLCD();

	  ejecutar();



	  num(bit3);  // Mostrar el segundo dígito (centenas)

	  escribirLCD();

	  ejecutar();

	  caracteres(".");

	  escribirLCD();

	  ejecutar();

	  num(bit2);  // Mostrar el tercer dígito (decenas)

	  escribirLCD();

	  ejecutar();



	  num(bit1);  // Mostrar el cuarto dígito (unidades)

	  escribirLCD();

	  ejecutar();







	  HAL_Delay(300);

	  break;

	  }

	  HAL_Delay(100);*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
  void ejecutar()

  {

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);  // E = 0

  HAL_Delay(1);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);    // E = 1

  HAL_Delay(2);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);  // E = 0

  HAL_Delay(3);

  }

  void escribirLCD()

  {

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, datLCD[0]);  // RS Pin

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, datLCD[1]);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, datLCD[2]);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, datLCD[3]);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, datLCD[4]);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, datLCD[5]);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, datLCD[6]);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, datLCD[7]);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, datLCD[8]);

  }

  void configInicio(int bits, int linea, int formato, int on, int cursor, int parpadeo, int LR, int S)

  {

  /* CONFIGURACIÓN DE TODOS LOS BITS CUANDO ESTEN ABAJO */



  escribirLCD();

  ejecutar();



  /* FUNCION SET */

  datLCD[0] = 0; datLCD[1] = 0; datLCD[2] = 0; datLCD[3] = 1; datLCD[4] = bits;datLCD[5] = linea;datLCD[6] = formato;

  escribirLCD();

  ejecutar();



  /* Display on/off control */

  datLCD[0] = 0;datLCD[1] = 0;datLCD[2] = 0;datLCD[3] = 0;datLCD[4] = 0;datLCD[5] = 1; datLCD[6] = on;datLCD[7] = cursor;datLCD[8] = parpadeo;

  escribirLCD();

  ejecutar();



  /* Entry mode set */

  datLCD[0] = 0;datLCD[1] = 0;datLCD[2] = 0;datLCD[3] = 0;datLCD[4] = 0;datLCD[5] = 0;datLCD[6] = 1; datLCD[7] = LR;datLCD[8] = S;

  escribirLCD();

  ejecutar();

  }

  void borrarPantalla()

  {

  datLCD[0] = 0; datLCD[1] = 0;datLCD[2] = 0;datLCD[3] = 0;datLCD[4] = 0;datLCD[5] = 0;datLCD[6] = 0;datLCD[7] = 0;datLCD[8] = 1;

  escribirLCD();

  ejecutar();



  }



  void volverinicio()

  {

  datLCD[0] = 0;datLCD[1] = 0;datLCD[2] = 0;datLCD[3] = 0;datLCD[4] = 0;datLCD[5] = 0;datLCD[6] = 0;datLCD[7] = 1;datLCD[8] = 0;

  escribirLCD();

  ejecutar();

  }



  void espacio(int LR, int SC)

  {

  datLCD[0] = 0; datLCD[1] = 0;datLCD[2] = 0;datLCD[3] = 0;datLCD[4] = 1; datLCD[5] = SC; datLCD[6] = LR;datLCD[7] = 0;datLCD[8] = 0;

  escribirLCD();

  ejecutar();

  }



  void confdireccion(int AC6, int AC5, int AC4, int AC3, int AC2, int AC1, int AC0)

  {

  datLCD[0] = 0;datLCD[1] = 1;datLCD[2] = AC6;datLCD[3] = AC5;datLCD[4] = AC4;datLCD[5] = AC3;datLCD[6] = AC2;datLCD[7] = AC1;datLCD[8] = AC0;

  escribirLCD();

  ejecutar();

  }



  void escribirRAM(int D7, int D6, int D5, int D4, int D3, int D2, int D1, int D0){

  datLCD[0] = 1; datLCD[1] = D7;datLCD[2] = D6;datLCD[3] = D5;datLCD[4] = D4;datLCD[5] = D3;datLCD[6] = D2;datLCD[7] = D1;datLCD[8] = D0;

  escribirLCD();

  ejecutar();

  };

  void num(int num)

  {

  switch (num){



  case 0:datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1;      datLCD[5]=0; datLCD[6]=0; datLCD[7]=0; datLCD[8]=0;

  break;

  case  1: datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1;      datLCD[5]=0; datLCD[6]=0; datLCD[7]=0; datLCD[8]=1;

  break;

  case  2: datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1;      datLCD[5]=0; datLCD[6]=0; datLCD[7]=1; datLCD[8]=0;

  break;

  case  3: datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1;      datLCD[5]=0; datLCD[6]=0; datLCD[7]=1; datLCD[8]=1;

  break;

  case  4: datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1;      datLCD[5]=0; datLCD[6]=1; datLCD[7]=0; datLCD[8]=0;

  break;

  case  5: datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1;      datLCD[5]=0; datLCD[6]=1; datLCD[7]=0; datLCD[8]=1;

  break;

  case  6: datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1;      datLCD[5]=0; datLCD[6]=1; datLCD[7]=1; datLCD[8]=0;

  break;

  case  7: datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1;      datLCD[5]=0; datLCD[6]=1; datLCD[7]=1; datLCD[8]=1;

  break;

  case  8: datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1;      datLCD[5]=1; datLCD[6]=0; datLCD[7]=0; datLCD[8]=0;

  break;

  case  9: datLCD[0]=1; datLCD[1]=0; datLCD[2]=0; datLCD[3]=1; datLCD[4]=1;      datLCD[5]=1; datLCD[6]=0; datLCD[7]=0; datLCD[8]=1;

  break;

  }



  }
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
